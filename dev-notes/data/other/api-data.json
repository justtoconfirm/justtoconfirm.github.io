{
  "page": {
    "pagetitle": "Application Programming Interface (API)",
    "pageheading": "Application Programming Interface (API)",
    "content": [
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Introduction",
        "copy": [
          "API is the acronym for Application Programming Interface. It allows two applications to talk to each other. Each time you use an application like Facebook or Twitter, send an instant message, or check the weather on your phone or desktop, you're using an API. Third party APIs allow you to use a third-party platform, such as Twitter or Facebook, to use some of the platform's functionality in your own applications or webpages. The Twitter API, for example, can be used to display recent Tweets on your web page. An API is basically an object that contains properties to store data the API uses, and methods to provide functionality the API makes available.",
          "Web APIs use HTTP requests to communicate to a publicly available URL endpoint containing JSON data. We often use HTTP requests to communicate with an API."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": false,
        "rel": null,
        "datatitle": "",
        "code": null
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Connecting to the API",
        "copy": [
          "The Studio Ghibli API was created to help developers learn how to interact with resources using HTTP requests. Since an API can be accessed by many different methods - JavaScript, PHP, Ruby, Python, and so on - the documentation for most APIs doesn't tend to give specific instructions for how to connect. We can see from this documentation that it tells us we can make requests with curl or regular REST calls.",
          "Here is the <a href=\"https://ghibliapi.herokuapp.com/\" target=\"_blank\" rel=\"noopener noreferrer\">API documentation</a>.",
          "On the documentation, scroll to the 'films' section. On the right you'll see GET /films. It will show us the URL of our API endpoint: <a href=\"https://ghibliapi.herokuapp.com/films\" target=\"_blank\" rel=\"noopener noreferrer\">https://ghibliapi.herokuapp.com/films</a>. Clicking on that link will display an array of objects in JSON."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": false,
        "rel": null,
        "datatitle": "",
        "code": null
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Retrieving the data with an HTTP request",
        "copy": [
          "Before we try to put anything on the front end of the website, we need to open a connection to the API. We'll open the connection using XMLHttpRequest objects, which is a way to open files and make an HTTP request.",
          "We will create a request variable and assign a new XMLHttpRequest object to it. We'll then open a new connection with the open() method. The arguments within this method will specify the type of request as GET as well as the URL of the API endpoint. The request completes and we can access the data inside the onload function."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": "",
        "code": [
          "// Create a request variable and assign a new XMLHttpRequest object",
          "var request = new XMLHttpRequest();",
          "",
          "// Open a new connection, using GET request on the URL endpoint",
          "request.open('GET', 'https://ghibliapi.herokuapp.com/films', true);",
          "",
          "request.onload = function() {",
          "    // Begin accessing JSON data here",
          "}",
          "",
          "// Send the request",
          "request.send();"
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Working with the JSON response",
        "copy": [
          "Now we've received a response from our HTTP request, we can now work with the data. The response is in JSON, however, we need to convert the JSON into JavaScript objects in order to work with it. We're going to use JSON.parse() to parse the response, and create a data variable that contains the JSON as an array of JavaScript objects. Using forEach(), we'll console log out the title of each film to ensure it's working correctly."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": "",
        "code": [
          "request.onload = function() {",
          "    // Begin accessing JSON data",
          "    var data = JSON.parse(this.response);",
          "",
          "    data.forEach(movie => {",
          "        // Log each movie's title",
          "        console.log(movie.title);",
          "    });",
          "}"
        ]
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "The current code is missing logic to deal with errors, such as if the wrong URL is used, or the URL is broken with nothing to display. When an HTTP request is made, the response returns with an HTTP status code. 404 is the most well-known response, meaning Not Found, and 200 OK is a successful request.",
          "Our earlier code will be wrapped in an if statement, to log out an error if the request fails."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": "",
        "code": [
          "request.onload = function() {",
          "    // Begin accessing JSON data",
          "    var data = JSON.parse(this.response);",
          "",
          "    if (request.status >= 200 && request.status < 400) {",
          "        data.forEach(movie => {",
          "            // Log each movie's title",
          "            console.log(movie.title);",
          "        });",
          "    } else {",
          "        console.log('error');",
          "    }",
          "}"
        ]
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "We've successfully used a GET HTTP request to retieve (or consume) the API endpoint, which consisted of data in JSON format. However, we're still stuck in the console. We now want to display this data on the front end, which we can do by modifying the DOM.",
          "We have used XMLHttpRequest which is a widely supported built-in method for making requests. There is also a newer Fetch API which can be used for the same purpose, which is simpler, but has less browser support.",
          "Let's display the data onto the HTML page. Begin by creating an HTML page with the following code:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": "",
        "code": [
          "&lt;div id=\"root\"&gt;&lt;/div&gt;"
        ]
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "The JavaScript needs to now be updated:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": "",
        "code": [
          "const app = document.getElementById('root');",
          "const logo = document.createElement('img');",
          "logo.src = 'logo.png';",
          "",
          "const container = document.createElement('div');",
          "container.setAttribute('class', 'container');",
          "",
          "app.appendChild(logo);",
          "app.appendChild(container);",
          "",
          "// Create a request variable and assign a new XMLHttpRequest object",
          "var request = new XMLHttpRequest();",
          "",
          "// Open a new connection, using GET request on the URL endpoint",
          "request.open('GET', 'https://ghibliapi.herokuapp.com/films', true);",
          "",
          "request.onload = function() {",
          "    // Begin accessing JSON data",
          "    var data = JSON.parse(this.response);",
          "",
          "    if (request.status >= 200 && request.status < 400) {",
          "        data.forEach(movie => {",
          "            const card = document.createElement('div');",
          "            card.setAttribute('class', 'card');",
          "",
          "            const h1 = document.createElement('h1');",
          "            h1.textContent = movie.title;",
          "",
          "            const p = document.createElement('p');",
          "            movie.description = movie.description.substring(0, 300);",
          "            p.textContent = `${movie.description}...`;",
          "",
          "            container.appendChild(card);",
          "            card.appendChild(h1);",
          "            card.appendChild(p);",
          "        });",
          "    } else {",
          "        const errorMessage = document.createElement('marquee');",
          "        errorMessage.textContent = `${movie.description}...`;",
          "        app.appendChild(errorMessage);",
          "    }",
          "}",
          "",
          "// Send the request",
          "request.send();"
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "REST (Representational State Transfer)",
        "copy": [
          "REST determines what the API looks like. It stands for Representational State Transfer. It is a set of rules that developers follow when they create their APIs. The terms REST and RESTful APIs are simply referring to a set of standards that conform to a specific architectural style. One of these rules states that you should be able to get a piece of data (called a resource) when you link to a specific URL. A request is made to the API and a response is returned.",
          "The endpoint (or route) is the URL of the API you are requesting. The starting point of an APIs endpoint is called the root-endpoint. Here are a few root-endpoint examples:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": "",
        "code": [
          "// GitHub API root-endpoint",
          "https://api.github.com",
          "",
          "// Twitter API root-endpoint",
          "https://api.twitter.com"
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "",
        "copy": [
          "When a request to an API is made, the path determines the data (resource) that is returned. You need to view the documentation of the API to understand what paths are available. Let's say you want to get a list of repositories for a certain GitHub user using the GitHub API. The GitHub API documentation can be found <a href=\"https://developer.github.com/v3/\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.",
          "The documentation for the API tells you to use the following path:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": "",
        "code": [
          "/users/:username</span>/repos"
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "",
        "copy": [
          "Any colons (:) on a path denotes a variable. You should replace the variable value with an actual value when you send the request. In this example you should replace the variable value with a username of a GitHub user.",
          "Using my GitHub account as an example, the :username variable will be replaced with justtoconfirm. The endpoint to get all repositories for my GitHub account would be this:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": "",
        "code": [
          "// Replacing the variable with a GitHub account",
          "/users/justtoconfirm/repos",
          "",
          "// The endpoint to get a list of repositories",
          "https://api.github.com/users/justtoconfirm/repos"
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "",
        "copy": [
          "The final part of an endpoint is the query parameters. Query parameters are not part of the REST architecture, but many APIs use them. They provide you with the option to modify a request with key-value pairs and always begin with a question mark (?). Each parameter pair is then separated with an ampersand (&).",
          "When you try to get a list of a GitHub user's repositories, you can add parameters to your request to modify the results returned to you. If you'd like to get a list of the repositories that recently had commits that were pushed, you can set the value of sort to pushed:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": "",
        "code": [
          "// Example query parameters",
          "?query1=value1&query2=value2",
          "",
          "// Getting recent pushes to the GitHub repository",
          "https://api.github.com/users/justtoconfirm/repos?sort=pushed"
        ]
      }       
    ]
  }
}