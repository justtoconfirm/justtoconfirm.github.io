{
  "page": {
    "pagetitle": "Optimisation, Security & Errors",
    "pageheading": "Optimisation, Security & Errors",
    "content": [
      {
        "label": "LINKS",
        "links": [
          "<a href='../../index.html'>Home</a>",
          "<!-- https://mathiasbynens.github.io/rel-noopener/ -->",
          "<!-- https://www.searchcandy.uk/seo/does-adding-relnoopener-noreferrer-to-a-link-affect-seo/ -->",
          "<!-- https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types -->",
          "<!-- https://github.com/asciidoctor/asciidoctor/issues/2071 -->",
          "<!-- https://support.performancefoundry.com/article/186-noopener-noreferrer-on-my-links -->",
          "<!-- https://washamdev.com/why-rel-noopener-noreferrer-in-wordpress-links/ -->",
          "<!-- https://www.jitbit.com/alexblog/256-targetblank---the-most-underestimated-vulnerability-ever/ -->",
          "<!-- https://www.creativebloq.com/web-design/website-security-tips-protect-your-site-7122853 -->",
          "<!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500 -->",
          "<!-- https://www.acunetix.com/websitesecurity/csrf-attacks/ -->",
          "<!-- https://developer.chrome.com/devtools -->",
          "<!-- https://developers.google.com/web/tools/chrome-devtools/ui#command-menu -->"
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "External Anchors",
        "copy": [
          "Often when we want a link to open in a new tab/window within the browser, we often use the target attribute. However, simply doing this can lead to a potentially serious vulnerability.",
          "The page opens in a new tab/window, but for a small time, the page or link that has been opened, can potentially have control of the first page (page with the initial link). For example, you have 'Page A' with a link to 'Page B'. The link is clicked and opens 'Page B' within a new tab/window. 'Page B', for a moment, can potentially control 'Page A' using JavaScript.",
          "This vulnerability is known as 'reverse tabnabbing', and could lead an attacker to download something to your device, intercept data being sent, change cookies, or redirect to any page they wanted.",
          "The reason this occurs is because it can grant access to the window.opener object of the previous page (where the link is located) and can allow some JavaScript to be executed on the opening page, such as using the window.opener.location object, to redirect the user to a phishing or malicious page. Thankfully, the origin security model of the web prevents it reading your page, but some legacy APIs mean it can navigate your page to a different URL using window.opener.location = newURL.",
          "Due to the synchronous cross-window access the DOM gives us via window.opener, windows launched using _blank within the target attribute, end up in the same process and thread. This is also true for iFrames and windows opened via window.open. the 'noopener' tag prevents window.opener, so there's no cross-window access. This also has a minor performance benefit.",
          "<ul class='list'><li>noopener - Instructs the browser to open the link without granting the new browsing context access to the document that opened it, by not setting the window.opener property on the opened window, this returns null.</li><li>noreferrer - Prevents the browser, when navigating to another page, from sending the page address or any other value, as a referrer via the Referer: HTTP header.</li></ul>",
          "This is something that can easily be fixed by adding the 'rel' attribute to your links that use the 'target' attribute:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": "HTML",
        "code": [
          "&lt;!-- Typical link --&gt;",
          "&lt;a href='#' target='_blank'>Open new tab&lt;/a&gt;",
          "",
          "&lt;!-- More Secure --&gt;",
          "&lt;a href='#' target='_blank' rel='noopener'>Open new tab&lt;/a&gt;",
          "",
          "&lt;!-- Support for Firefox and browsers not supporting noopener --&gt;",
          "&lt;a href='#' target='_blank' rel='noopener noreferrer'>Open new tab&lt;/a&gt;"
        ]
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "It is worth noting that Edge doesn't support window.opener for _blank links, so this fix is not necessarily needed for the Edge browser.",
          "WordPress now automatically adds the 'rel' attribute to links that use the 'target' attribute to open new pages/links in new tabs or windows.",
          "The fix will potentially affect referrer tracking and some affiliate links. Lost referrer tracking should only be an issue if you have a non-secure http connection. The 'noopener noreferrer' tag should not impact HTTPS transfers (i.e. form your https site to another https site).",
          "There are a few things you can do to disable the 'noopener noreferrer' issues:",
          "<ul class='list'><li>Avoid using the 'target' attribute on your links. Google recommends you don't use this code in your links if you can avoid it, but for SEO this is often used to boost 'time on page' stats and bounce rate.</li><li>Upgrade your website to HTTPS and only link to sites using HTTPS. All your affiliate links should be HTTPS anyway, and you don't want to run a tracking campaign using HTTP.</li></ul>"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": false,
        "rel": null,
        "datatitle": null,
        "code": null
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "CSS Performance",
        "copy": [
          "Should you want to improve your CSS performance and optimise your code, visit the following pages:",
          "<ul class'list'><li><a href='css-guidelines.html'>CSS Guidelines</a></li><li><a href='css-performance.html'>CSS Performance</a></li></ul>"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": false,
        "rel": null,
        "datatitle": null,
        "code": null
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "HTTPS",
        "copy": [
          "HTTP means HyperText Transfer Protocol. It is the underlying protocol used by the World Wide Web to define how messages are formatted and transmitted.",
          "HTTP Secure (HTTPS) is an extension of the HyperText Transfer Protocol (HTTP) used for secure communications over a computer network. In HTTPS, the communication protocol is encrypted by Transport Layer Security (TLS), or by it's predecessor, Secure Sockets Layer (SSL). TLS and SSL are used to transport data safely. HTTPS is also sometimes referred to as HTTP over TLS (Transport Layer Security).",
          "When using HTTP, everything sent between you and a web server is sent in plain text, it is not encrypted and can be intercepted by third parties. HTTPS encrypts this data for security and privacy. This is why HTTPS is used by many sites that require data security such as online shopping and online banking.",
          "Often within the browser address bar, a small 'padlock' icon will be visible if HTTPS is being used."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": null,
        "datatitle": null,
        "code": [
          "http://www.unsecure.com",
          "",
          "https://www.secure.com"
        ]
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "HTTPS requires the use of an SSL (Secure Sockets Layer) certificate. This is used to create the secure encrypted connection between the web server and the web browser.",
          "<ul class='list'><li>Purchase an SSL certificate and a dedicated IP address from your hosting company</li><li>Install and configure the SSL certificate</li><li>Configure any hard internal links within your website from HTTP to HTTPS</li><li>Update any JavaScript code libraries and plugins</li><li>Redirect external links to HTTPS</li><li>Update the htaccess file and server configuration</li><li>Implement 301 redirects on a page-by-page basis</li><li>Set up an HTTPS site in Google Search Console and Google Analytics</li></ul>",
          "HTTPS is not going to prevent your website from being hacked, but it will provide the website with the minimum level of security that most visitors now expect."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": false,
        "rel": null,
        "datatitle": null,
        "code": null
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "Google recommends a number of things that can be done when using HTTPS and to be considered when thinking about SEO (Search Engine Optimisation):",
          "<ul class='list'><li>Don't block your HTTPS site from crawling using a robots.txt file</li><li>Allow indexing of your pages by search engines where possible. Avoid the noindex robots meta tag.</li></ul>",
          "Google also lists HTTPS as a ranking factor in it's search results, with HTTPS websites being ranked higher in search results than those using HTTP."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": false,
        "rel": null,
        "datatitle": null,
        "code": null
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Error messages",
        "copy": [
          "Be careful with how much information you give away in your error messages. Provide only minimal errors to your users, to ensure that you don't leak details (e.g. API keys or database information). Don't provide full exception details, as these can make complex attacks like SQL injection far easier. Keep detailed errors in your server logs and show users only the information they need."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": false,
        "rel": null,
        "datatitle": null,
        "code": null
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Errors & Reponses",
        "copy": [
          "The browser console will often return any errors that may occur in your web page or application. Here is a list of common errors and error codes you may come across:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": false,
        "rel": null,
        "datatitle": null,
        "code": null
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "404",
        "copy": [
          "The HTTP 404, 404 Not Found, and 404 (pronounced as 'four oh four') error message is an HTTP (HyperText Transfer Protocol) standard response code. This indicates that the client was able to communicate with a given server, but the server could not find what was requested.",
          "The last '4' in '404' indicates the specific error in the group of '40x', which also includes '400: Bad Request' and '401: Unauthorized'.",
          "This error simply means that the asset (image, page) cannot be found. This could be due to the asset being missing, or perhaps the path/link to the asset or page is incorrect.",
          "Often the 404 Not Found error will appear when you are searching for a web page you we're trying to reach. This error is then returned because the page cannot be found on the server. It is a client-side error meaning that either the page has been removed/moved, and the URL was not changed or updated. The error can also appear if you enter the incorrect URL."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": false,
        "rel": null,
        "datatitle": null,
        "code": null
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "500",
        "copy": [
          "The 500 Internal Server Error is a very general HTTP status code that means something has gone wrong on the website's server (server-side error) but the server could not be more specific on what the exact problem is. This is often a 'catch-all' generic error response. Essentially, the server has encountered an unexpected condition that has prevented it from fulfilling the request. This is a common issue/error during online checkout processes such as when making online purchases.",
          "This type of error can sometimes be caused due to a syntax error in a .htaccess file on the server. The server logs may indicate what has caused the error to occur and may contain more details about the request to prevent the error from happening again in the future.",
          "This error maybe temporary, a page refresh or trying the URL once more, may often resolve this issue."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": null,
        "datatitle": null,
        "code": [
          "500 Internal Server Error"
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "503",
        "copy": [
          "The 503 Service Unavailable HTTP server error response code indicates that the server is not ready to handle the request.",
          "Common causes are a server down for maintenance or an overloaded server. The response should be used for temporary conditions and the Retry-After HTTP header should, if possible, contain the estimated time for the recovery of the service.",
          "A user-friendly page explaining the problem should be sent."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": null,
        "datatitle": null,
        "code": [
          "503 Service Unavailable"
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Minification",
        "copy": [
          "Minification is the process of removing all unnecessary characters, including comments and whitespace, from source code without changing it's functionality. This is common in both JavaScript and CSS as it helps to reduce the file size and improve page performance.",
          "The code is stripped of data that isn't required in order for the file to be executed. This is performed after the code has been written, but before being deployed. Using the minified file in production results in faster response times as less data needs to be processed for each request. This leads to performance gains without compromising the user's experience.",
          "This process of minification creates a file which is optimised, but harder to read. This often removes whitespace and comments, and shortening of variable names or functions to be more concise. This process only needs to be performed when the source code changes.",
          "You may see a number of files with the prefix of '.min' suggesting that these files have been minified."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": null,
        "datatitle": null,
        "code": [
          "&lt;link rel='stylesheet' href='style/styles.min.css' /&gt;",
          "",
          "&lt;script src='scripts/file.min.js'&gt;&lt;/script&gt;"
        ]
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "We can use a number of tools to automate the creation of minified files/assets during the development build process:",
          "<ul class='list'><li>Gulp</li><li>Grunt</li><li>Webpack</li></ul>"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": false,
        "rel": null,
        "datatitle": null,
        "code": null
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Unused CSS & JavaScript",
        "copy": [
          "Within the Chrome DevTools (developer tool) from Chrome 59 and above, you can find unused CSS and JavaScript code with the new Coverage tool.",
          "To check your version of Chrome, enter the following into your Chrome browser address bar: <a href='chrome://settings/help'>chrome://settings/help</a>",
          "Open the inspector in Chrome and select the menu option (three dots in the top-right corner). Within this menu, select More tools > Coverage. You will need to click the 'record' button to capture coverage of the page.",
          "Once this has been done, a list of CSS and JavaScript files used throughout the page will be listed confirming how much code is being used. Clicking the file itself will show the code.",
          "You can also open this tool through the DevTools Command Menu - CMD + SHIFT + P (Mac) or CTRL + SHIFT + P (Windows/Linux) and start typing: Coverage",
          "Following the command, select 'Show Coverage'",
          "You can also use the Command Menu to open files within Chrome DevTools using the command: CMD + O (Mac) or CTRL + O (Windows/Linux)",
          "This is such a useful tool to reduce the size of your pages by removing code that is no-longer required."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": false,
        "rel": null,
        "datatitle": null,
        "code": null
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "SQL Injection",
        "copy": [
          "SQL injection attacks are when an attacker uses a web form field or URL parameter to gain access to or to gain access to your database. Without security, it is very easy to use SQL to change tables, delete data, and get information from your database. You can prevent this by always using parameterised queries."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": null,
        "datatitle": null,
        "code": [
          "// SQL query vulnerable to SQL injection",
          "\"SELECT * FROM table WHERE column = '\" + parameter + \"';\"",
          "",
          "/*", 
          "SQL injection",
          "URL parameter changed to pass in 'or '1'='1",
          "additional query can be added to the end of the SQL statement",
          "since '1' is equal to '1'",
          "*/",
          "\"SELECT * FROM table WHERE column = '' OR '1'='1';\""
        ]
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "You could fix this query by explicitly parameterising it. For example, if you we're to use MySQLi in PHP, this should become:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "php",
        "datatitle": "PHP",
        "code": [
          "$stmt = $pdo->prepare('SELECT * FROM table WHERE column = :value');",
          "$stmt->execute(array('value' => $parameter));"
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "CSRF",
        "copy": [
          "Cross-site request forgery (CSRF), sometimes known as one-click attack, session riding, or XSRF, is a type of malicious exploit of a website" ,
          "This type of attack forces an end user to execute unwanted actions on a web application in which they are currently authenticated.",
          "Let's take a contact form on a website. This does not require any user privileges to submit the form. The problems arise when a user with additional privileges would be performing actions not accessible to everyone. This is when CSRF attacks are utilised."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": false,
        "rel": null,
        "datatitle": null,
        "code": null
      }
    ]
  }
}