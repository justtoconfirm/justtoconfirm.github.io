{
  "page": {
    "pagetitle": "Redux",
    "pageheading": "Redux",
    "content": [
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Install Redux",
        "copy": [
          "To install Redux (when used with React), use NPM (Node Package Manager) to install as dependencies:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": null,
        "code": [
          "$ npm install redux",
          "",
          "# To use Redux with React",
          "$ npm install react-redux"
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "State",
        "copy": [
          "In a React component the state holds the data. The component may render such data to the user. The state can change in response to actions and events and using Redux allows the state to be within a single location. This allows the logic for fetching and managing state to live outside of React.",
          "To implement Redux within a React application, setup three directories in your 'src' directory of your application: ./actions, ./reducers, and ./store.",
          "A useful link can be found <a href=\"https://www.valentinog.com/blog/react-redux-tutorial-beginners/\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>." 
        ],
        "label": "CODE/MARKUP",
        "showmarkup": false,
        "rel": "html",
        "datatitle": null,
        "code": null
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Store",
        "copy": [
          "The Redux store is like the human brain. It orchestrates all the moving parts in Redux. It is fundamental as the state of the whole application lives inside the store.",
          "createStore is the function used for creating the Redux store. This takes a reducer as the first argument, which is rootReducer in our case."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": null,
        "code": [
          "// src/js/store/index.js",
          "import { createStore } from 'redux'",
          "import rootReducer from '../reducers/index'",
          "",
          "const store = createStore(rootReducer)",
          "",
          "export default store"          
        ]
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "You may also pass an initial state to createStore. This state comes from reducers.",
          "To connect Redux with React, we're going to use Provider. Provider is a high order component that comes with react-redux. This wraps up your React application and makes it aware of the entire Redux store. The Redux store manages everything. React must use the store for accessing the state and to dispatch actions.",
          "We can update the index.js file to include the store:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": null,
        "code": [
          "import React from 'react'",
          "import ReactDOM from 'react-dom'",
          "import { Provider } from 'react-redux'",
          "import store from './store/store'",
          "import App from './components/App'",
          "",
          "ReactDOM.render (",
          "   &lt;Provider store={store}&gt;",
          "      &lt;App /&gt;,",
          "   &lt;/Provider&gt;,",
          "   document.getElementById('root')",
          ")"
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Reducers",
        "copy": [
          "A reducer is just a JavaScript function that takes two parameters: the current state, and the action. A reducer must be pure meaning that it is a function that returns exactly the same output for the given input. In Redux, reducers produce the state and the state must return entirely from reducers. In our example, we'll create a simple reducer that takes the initial state as the first parameter. As a second parameter, we'll provide an action. As of now, the reducer will do nothing but return the initial state.",
          "The example reducer below returns an initial state without doing anything else. The reducers will be placed within the 'reducers' directory within 'src'."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": null,
        "code": [
          "// src/reducers/index.js",
          "const initialState = {",
          "   articles: []", 
          "}",
          "",
          "const rootReducer = (state = initialState, action) => state",
          "",
          "export default rootReducer"         
        ]
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "We can then update the store to include the reducer and get the initial state:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": null,
        "code": [
          "// src/js/store/index.js",
          "import { createStore } from 'redux'",
          "",
          "const store = createStore()",
          "",
          "export default store"         
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Actions",
        "copy": [
          "The only way to change the state is by sending a signal to the store. This signal is an action. 'Dispatching an action' is the proces of sending out a signal. A Redux action is nothing more than a JavaScript object. This is what an action looks like:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": null,
        "code": [
          "{",
          "   type: 'ADD_ARTICLE',",
          "   payload: { name: 'React Redux Tutorial', id: 1 }",
          "}"        
        ]
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "Every action needs a type property for describing how the state should change. You can specify a payload also. In the above example, the payload is a new article. A reducer will add the article to the current state later.",
          "It is best practice to wrap every action within a function. This function is an action creator.",
          "We begin by creating an actions directory named 'actions' and within this directory, we create a file named 'index.js'. In the following example, the type property is nothing more than a string."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": null,
        "code": [
          "// src/actions/index.js",
          "export const addArticle = article => ({",
          "   type: \"ADD_ARTICLE\",", 
          "   payload: article",
          "});"        
        ]
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "The reducer will use the string to determine how to calculate the next state. It is best to have action types declared as constants to avoid typos and duplicates as this helps avoid errors that will be difficult to debug.",
          "To do this, create a new directory called 'constants', then create a file named 'action-types.js' within this directory. Add the following code to this newly created file:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": null,
        "code": [
          "// src/constants/action-types.js",
          "export const ADD_ARTICLE = \"ADD_ARTICLE\";"       
        ]
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "Now open the 'index.js' file within the 'actions' directory and update the code:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": null,
        "code": [
          "// src/actions/index.js",
          "import { ADD_ARTICLE } from '../constants/action-types';",
          "",
          "export const addArticle = article => ({",
          "   type: ADD_ARTICLE,", 
          "   payload: article",
          "});"
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Refactoring the Reducers",
        "copy": [
          "The state of the application lives as a single immutable object within the store. As soon as the store receives an action, it triggers a reducer. The reducer then returns the next state.",
          "The reducer will grow as you app will become bigger. You can split a big reducer into separate functions and combine them within combineReducers.",
          "Our previous reducer dies nothing other than returning the initial state. Let's fix that. Open up 'src/reducers/index.js' and update the code:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": null,
        "code": [
          "import { ADD_ARTICLE } from \"../constants/action-types\";",
          "const initialState = {",
          "   articles: []",
          "};",
          "const rootReducer = (state = initialState, action) => {",
          "   switch (action.type) {",
          "      case ADD_ARTICLE:",
          "         return { ...state, articles: state.articles.concat(action.payload) };",
          "      default:",
          "         return state;",
          "   }",
          "};",
          "export default rootReducer;"
        ]
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "The intial state is now left untouched, the resulting state is a copy of the initial state. Now we want to display output within the console.",
          "Redux itself is a pretty small library (around 2kb). The Redux store exposes a simple API for managing state. The most important methods are:",
          "<ul><li>getState - for accessing the current state of the application.</li><li>dispatch - for dispatching an action</li><li>subscribe - for listening on state change</li></ul>",
          "We will use the above methods within the browser console. To do so, we have to export as global variables the store and actions we create. This will allows us to access the methods of the store within the console when they are global variables.",
          "Open up the 'index.js' file within the 'src' directory and update the following code:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "html",
        "datatitle": null,
        "code": [
          "import store from \"../js/store/index\";",
          "import { addArticle } from \"../js/actions/index\";",
          "",
          "window.store = store;",
          "window.addArticle = addArticle;"
        ]
      }
    ]
  }
}