{
  "page": {
    "pagetitle": "JavaScript Objects",
    "pageheading": "Objects",
    "pageintro": "",
    "content": [     
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "In computer programming, each physical thing in the world can be represented as an object. So if you had one object for a hotal and another for a car, programmers would often say there is one instance of a hotel object and one instance of the car object.",
          "Each object can have its own properties, methods and events.",
          "Here is an empty object:"
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "js",
        "datatitle": "JS",
        "code": [
          "<span class='keyword'>var</span> <span class='name'>obj</span> = {",
          "",
          "}"
        ]
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "Not everything in JavaScript is an object. Many things such as: strings, numbers and booleans, are primitives not objects as they do not have properties or methods, unlike objects.",
          "Objects group together a set of properties and methods to create a model.",
          "Objects in JavaScript can be likened to objects in the real world. A car, as an example of a real world object, has properties used to define it's characteristics such as: name or colour. A car can also have methods such as: accelerate or brake.",
          "Properties are similar to variables within an object and methods are similar to functions."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": false,
        "rel": "js",
        "datatitle": "JS",
        "code": null
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Native objects",
        "copy": [
          "Native objects are part of the language specification. They're available to us regardless of the client our JavaScript code is running on. Examples of native objects would be: Array, Date, and Math."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": false,
        "rel": "js",
        "datatitle": "JS",
        "code": null
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "User objects",
        "copy": [
          "User objects - sometimes referred to as contributed objects - are custom objects we define at run time. The two ways to declare our own objects are: Object literals and Constructor notation/functions."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": false,
        "rel": "js",
        "datatitle": "JS",
        "code": null
      }, 
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Host objects",
        "copy": [
          "Host objects are made available by the client our JavaScript code is running on. Different clients have different host objects that allow us to interact with it.",
          "If we're writing code for a browser, for example, the browser will provide us with host objects such as: window, document, location, and history."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": false,
        "rel": "js",
        "datatitle": "JS",
        "code": null
      },  
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Properties",
        "copy": [
          "Properties are similar to variables within an object. They are used to hold names with values.",
          "A car may have common characteristics such as colour, make, model, and engine size that are common with all cars. When we talk about a model, these characteristics are the properties of the car object."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "js",
        "datatitle": "JS",
        "code": [
          "<span class='keyword'>var</span> <span class='name'>obj</span> = {",
          "",
          "    <span class='comment'>// Property of the object</span>",
          "    <span class='name'>name</span> : <span class='value'>value</span>;",
          "",
          "}"
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Methods",
        "copy": [
          "Methods represent what people need to do with objects and can receive or update the values of properties within an object. They are similar to functions.",
          "Methods contain the block of code to perform a task. These methods can be called by events.",
          "For example, in the hotel object, the makeBooking() method will increase the value of the bookings property and the cancelBooking() method will decrease this value. The checkAvailability() method can be used to return the number of remaining rooms the hotel has available.",
          "The 'book' event will call the makeBooking() method (the block of code to perform the task, to increase the value of the bookings property), and the 'cancel' event will use the cancelBooking() method to reduce the value of the bookings property. The bookings property value within the hotel object is then updated each time either method (the block of code performing the task) is called."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "js",
        "datatitle": "JS",
        "code": [
          "<span class='keyword'>var</span> <span class='name'>obj</span> = {",
          "",
          "    <span class='comment'>// Property of the object</span>",
          "    <span class='name'>name</span> : <span class='value'>value</span>;",
          "",
          "    <span class='comment'>// Method within the object</span>",
          "    <span class='name'>exampleMethod</span> : <span class='keyword'>function</span> () {",
          "",
          "        <span class='comment'>// Code goes here</span>",
          "",
          "    }",
          "",
          "}"
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Literal notation",
        "copy": [
          "Literal notation is often used when you want to create a single object in JavaScript.",
          "In the following example we will use literal notation to create a Hotel object containing a number of properties such as: name, rooms, and booked. This object is declared as a property of the global window object. If you view the window object in the console, the hotel object will be located within."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "js",
        "datatitle": "JS",
        "code": [
          "<span class='keyword'>var</span> <span class='name'>hotel</span> = {",
          "   <span class='name'>name</span> : <span class='value'>'The Grand Hotel'</span>,",
          "   <span class='name'>rooms</span> : <span class='value'>104</span>,",
          "   <span class='name'>booked</span> : <span class='value'>98</span>",
          "};"      
        ]
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "Properties of an object can be accessed using dot notation, the name of the object followed by a period (known as the member operator) and then the name of the property you wish to use.",
          "Within objects, properties are just like variables. The name and number of rooms available within the Hotel object can be retrieved using dot notation."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "js",
        "datatitle": "JS",
        "code": [
          "<span class='name'>hotel</span>.<span class='name'>name</span>;    <span class='comment'>// The Grand Hotel</span>",
          "<span class='name'>hotel</span>.<span class='name'>rooms</span>;    <span class='comment'>// 104</span>" 
        ]
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "Within our Hotel object a method will now be created to check the available rooms within our hotel. A method is similar to a function that is within an object. This method uses the keyword of this to indicate that the method is using the properties of the object.",
          "The return statement is used to allow the result the method returns to be available outside of the object.",
          "We can call the method using dot notation once again."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "js",
        "datatitle": "JS",
        "code": [
          "<span class='keyword'>var</span> <span class='name'>hotel</span> = {",
          "   <span class='name'>name</span> : <span class='value'>'The Grand Hotel'</span>,",
          "   <span class='name'>rooms</span> : <span class='value'>104</span>,",
          "   <span class='name'>booked</span> : <span class='value'>98</span>,",
          "",
          "   <span class='comment'>// Method to check the rooms available</span>",
          "   <span class='name'>checkAvailableRooms</span> : <span class='keyword'>function</span> () {",
          "",
          "      <span class='comment'>// Return the number of available rooms</span>",
          "      <span class='return'>return</span> <span class='keyword'>this</span>.<span class='name'>rooms</span> - <span class='keyword'>this</span>.<span class='name'>booked</span>;",
          "",
          "   }",
          "};",
          "",
          "<span class='comment'>// Call the method to return the number of rooms available</span>",
          "<span class='name'>hotel</span>.<span class='name'>checkAvailableRooms</span> ();"
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Constructor notation",
        "copy": [
          "If you need more that one object, the Constructor notation can be used. This allows a JavaScript function to build a template for creating multiple objects. Instances of this object can then be created using the keyword of new, followed by a call to the function when you need to create a new object.",
          "The name of the Constructor function should always begin with an uppercase letter.",
          "Let's create a new Hotel object using the Constructor notation."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "js",
        "datatitle": "JS",
        "code": [
          "<span class='keyword'>function</span> <span class='name'>Hotel</span> ( <span class='value'>name</span>, <span class='value'>rooms</span>, <span class='value'>booked</span> ) {",
          "",
          "   <span class='comment'>// Hotel properties</span>",
          "   <span class='keyword'>this</span>.<span class='name'>name</span> = <span class='value'>name</span>;",
          "   <span class='keyword'>this</span>.<span class='name'>rooms</span> = <span class='value'>rooms</span>;",
          "   <span class='keyword'>this</span>.<span class='name'>booked</span> = <span class='value'>booked</span>;",
          "",
          "   <span class='comment'>// Method to check the rooms available</span>",
          "   <span class='keyword'>this</span>.<span class='name'>checkAvailableRooms</span> = <span class='keyword'>function</span> () {",
          "",
          "      <span class='comment'>// Return the number of available rooms</span>",
          "      <span class='return'>return</span> <span class='keyword'>this</span>.<span class='name'>rooms</span> - <span class='keyword'>this</span>.<span class='name'>booked</span>;",
          "",
          "   };",
          "",
          "}"
        ]
      },
      {
        "label": "SECTION",
        "showheading": false,
        "heading": null,
        "copy": [
          "An instance of an object will inherit the properties and methods from within the object. Values for each hotel will be passed into the object paremeters - name, rooms, booked - using arguments when the function is called. The keyword of this is used instead of the object's name to indicate that the properties and methods belong to the Hotel object.",
          "Let us now create two new Hotels named 'The Grand Hotel' and 'Park Hotel' as instances of our Hotel object.", 
          "Each time we create a new hotel, the Hotel function is called and the values for each hotel are passed as arguments into the object's parameters. These values are then assigned to the properties of: name, rooms, and booked.", 
          "Any instance created can use the methods within the Hotel object, so we can use the checkAvailableRooms method to check the availability of rooms within both hotels."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "js",
        "datatitle": "JS",
        "code": [
          "<span class='keyword'>function</span> <span class='name'>Hotel</span> ( <span class='value'>name</span>, <span class='value'>rooms</span>, <span class='value'>booked</span> ) {",
          "",
          "   <span class='comment'>// Hotel properties</span>",
          "   <span class='keyword'>this</span>.<span class='name'>name</span> = <span class='value'>name</span>;",
          "   <span class='keyword'>this</span>.<span class='name'>rooms</span> = <span class='value'>rooms</span>;",
          "   <span class='keyword'>this</span>.<span class='name'>booked</span> = <span class='value'>booked</span>;",
          "",
          "   <span class='comment'>// Method to check the rooms available</span>",
          "   <span class='keyword'>this</span>.<span class='name'>checkAvailableRooms</span> = <span class='keyword'>function</span> () {",
          "",
          "      <span class='comment'>// Return the number of available rooms</span>",
          "      <span class='return'>return</span> <span class='keyword'>this</span>.<span class='name'>rooms</span> - <span class='keyword'>this</span>.<span class='name'>booked</span>;",
          "",
          "   };",
          "",
          "}",
          "",
          "<span class='comment'>// Create instances of the Hotel object</span>",
          "<span class='keyword'>var</span> <span class='name'>grandHotel</span> = <span class='keyword'>new</span> <span class='name'>Hotel</span> ( <span class='value'>'The Grand Hotel'</span>, <span class='value'>104</span>, <span class='value'>98</span> );",
          "<span class='keyword'>var</span> <span class='name'>parkHotel</span> = <span class='keyword'>new</span> <span class='name'>Hotel</span> ( <span class='value'>'Park Hotel'</span>, <span class='value'>98</span>, <span class='value'>94</span> );",
          "",
          "<span class='comment'>// Call the method to check the available rooms for each hotel</span>",
          "<span class='name'>grandHotel</span>.<span class='name'>checkAvailableRooms</span> ();",
          "<span class='name'>parkHotel</span>.<span class='name'>checkAvailableRooms</span> ();"
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Destructuring objects",
        "copy": [
          "Destructuring assignment is a special syntax that allows us to 'unpack' objects into a bunch of variables. Now we can work with variables instead of properties."
        ],
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "js",
        "datatitle": "JS",
        "code": [
          "<span class='comment'>// Object containing properties and values</span>",
          "<span class='keyword'>var</span> <span class='name'>options</span> = {",
          "    <span class='name'>title</span> : <span class='value'>'Menu'</span>,",
          "    <span class='name'>width</span> : <span class='value'>100</span>,",
          "    <span class='name'>height</span> : <span class='value'>50</span>",
          "};",
          "",
          "<span class='comment'>// 'Unpack' the object into individual variables</span>",
          "<span class='keyword'>var</span> { <span class='name'>title</span>, <span class='name'>width</span>, <span class='name'>height</span> } = <span class='name'>options</span>;",
          "",
          "<span class='comment'>// Variables</span>",
          "<span class='name'>title</span>;    <span class='comment'>// Menu</span>",
          "<span class='name'>width</span>;    <span class='comment'>// 100</span>",
          "<span class='name'>height</span>;   <span class='comment'>// 50</span>"
        ]
      },
      {
        "label": "SECTION",
        "showheading": true,
        "heading": "Objects, keys & entries",
        "copy": null,
        "label": "CODE/MARKUP",
        "showmarkup": true,
        "rel": "js",
        "datatitle": "JS",
        "code": [
          "<span class='comment'>// Object containing properties</span>",
          "<span class='keyword'>var</span> <span class='name'>user</span> = {",
          "    <span class='name'>name</span> : <span class='value'>'Dan'</span>,",
          "    <span class='name'>age</span> : <span class='value'>30</span>",
          "};",
          "",
          "<span class='comment'>// Loop over the properties in the object</span>",
          "<span class='keyword'>for</span> ( <span class='keyword'>var</span> <span class='value'>value</span> of <span class='keyword'>Object</span>.<span class='value'>values</span> ( <span class='value'>user</span> ) ) {",
          "",
          "    <span class='comment'>// Output the values in the object</span>",
          "    console.log( <span class='value'>value</span> );   <span class='comment'>// Dan, 30</span>",
          "",
          "}",
          "",
          "<span class='comment'>// Output all the object property names and properties</span>",
          "<span class='keyword'>Object</span>.<span class='value'>keys</span>( <span class='value'>user</span> );    <span class='comment'>// [ 'name', 'age' ]</span>",
          "<span class='keyword'>Object</span>.<span class='value'>values</span>( <span class='value'>user</span> );    <span class='comment'>// [ 'Dan', 30 ]</span>",
          "<span class='keyword'>Object</span>.<span class='value'>entries</span>( <span class='value'>user</span> );      <span class='comment'>// [ 'name', 'Dan'], [ 'age', '30' ]</span>"
        ]
      }
    ]
  }
}